<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">

    <tx:annotation-driven/>


    <jdbc:initialize-database data-source="dataSource" enabled="${database.init}">
        <jdbc:script location="classpath:db/${jdbc.initLocation}"/>
        <jdbc:script encoding="utf-8" location="classpath:db/populateDB.sql"/>
    </jdbc:initialize-database>
    <!--    <bean id="dataSource"
              class="org.springframework.jdbc.datasource.DriverManagerDataSource">
            <property name="driverClassName" value="${database.driverClassName}"/>
            <property name="url" value="${database.url}"/>
            <property name="username" value="${database.username}"/>
            <property name="password" value="${database.password}"/>
        </bean>-->

    <!--<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
    <!--<property name="location">-->
    <!--<value>classpath:db/heroku.properties</value>-->
    <!--</property>-->
    <!--</bean>-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:db/heroku.properties</value>
        </property>
    </bean>

    <beans profile="postgres">
        <context:property-placeholder location="classpath:db/postgres-local.properties"
                                      system-properties-mode="OVERRIDE"/>


        <bean id="dataSource"
              class="org.apache.tomcat.jdbc.pool.DataSource"
              p:driverClassName="org.postgresql.Driver"
              p:url="${database.url}?ssl=true&amp;sslfactory=org.postgresql.ssl.NonValidatingFactory"
              p:username="${database.username}"
              p:password="${database.password}"/>
    </beans>

    <beans profile="heroku">
        <context:property-placeholder location="classpath:/db/heroku.properties" system-properties-mode="OVERRIDE"/>

        <bean class="java.net.URI" id="dbUrl">
            <constructor-arg value="${DATABASE_URL}"/>
        </bean>

        <bean id="dataSource"
              class="org.apache.tomcat.jdbc.pool.DataSource">
            <property name="url" value="#{ 'jdbc:postgresql://' + @dbUrl.getHost() + @dbUrl.getPath() }"></property>
            <property name="username" value="#{@dbUrl.getUserInfo().split(':')[0]}"></property>
            <property name="password" value="#{@dbUrl.getUserInfo().split(':')[1]}"></property>
            <property name="driverClassName" value="org.postgresql.Driver"></property>
            <property name="validationQuery" value=" SELECT 1 FROM points"></property>
            <property name="maxActive" value=" 10"></property>
            <property name="minIdle" value=" 2"></property>
            <property name="maxWait" value=" 20000"></property>
            <property name="initialSize" value="2"></property>
            <property name="maxIdle" value=" 5"></property>
            <property name="testOnBorrow" value="true"></property>
            <property name="removeAbandoned" value="true"></property>
            <property name="testOnConnect" value="true"></property>
            <property name="testWhileIdle" value="true"></property>
            <!--<property name="ssl" value="true"></property>-->
            <!--<property name="" value="org.postgresql.ssl.NonValidatingFactory"></property>-->
        </bean>
    </beans>


    <beans profile="jpa">
        <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
              p:dataSource-ref="dataSource"
              p:packagesToScan="es.ahs.**.model">


            <property name="jpaPropertyMap">
                <map>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}"
                           value="${hibernate.use_sql_comments}"/>
                    <!--<entry key="#{T(org.hibernate.cfg.AvailableSettings).SHOW_SQL}" value="${jpa.showSql}"/>-->
                    <!--<entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_AUTO}" value="${hibernate.hbm2ddl}"/>-->
                    <!--<entry key="javax.persistence.schema-generation.scripts.action" value="drop-and-create"/>-->
                    <!--<entry key="javax.persistence.schema-generation.scripts.create-target"-->
                    <!--value="${GEO_ROOT}/config/ddl/create.ddl"/>-->
                    <!--<entry key="javax.persistence.schema-generation.scripts.drop-target"-->
                    <!--value="${GEO_ROOT}/config/ddl/drop.ddl"/>-->
                </map>
            </property>
            <property name="jpaVendorAdapter">
                <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
                      p:showSql="${jpa.showSql}">
                </bean>
            </property>
        </bean>
        <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
        <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
              p:entityManagerFactory-ref="entityManagerFactory"/>
        <context:component-scan base-package="es.ahs.**.repository.jpa"/>


    </beans>


</beans>